{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This site serves as the central hub for all architecture-related documentation, including Architectural Decision Records (ADRs) and C4 diagrams for various projects. Here, you'll find detailed insights into the design, decisions, and structure of our systems.</p>"},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":"<p>Architectural Decision Records (ADRs):</p> <ul> <li>Explore the key decisions made during the development of our projects.</li> <li>Understand the reasoning and trade-offs behind each decision.</li> </ul> <p>C4 Diagrams:</p> <ul> <li>Visualize the architecture of our systems using Context, Container, Component, and Code-level diagrams.</li> <li>Gain a clear understanding of how different parts of the system interact.</li> </ul>"},{"location":"#how-to-navigate","title":"How to Navigate","text":"<ul> <li>Use the navigation menu to browse through the ADRs and diagrams for specific projects.</li> <li>Each project has its own section with detailed documentation.</li> </ul>"},{"location":"#why-this-site","title":"Why This Site?","text":"<p>This documentation site is designed to:</p> <ul> <li>Promote transparency in architectural decisions.</li> <li>Provide a single source of truth for system design and structure.</li> <li>Help team members and stakeholders understand the architecture at various levels of detail.</li> </ul>"},{"location":"adr/convert-long-forms/","title":"ADR-004: Redesign Form Workflow into Step-wise and Partial Saving","text":""},{"location":"adr/convert-long-forms/#status","title":"Status","text":"<p>Proposed - 13/05/2025</p>"},{"location":"adr/convert-long-forms/#context","title":"Context","text":"<p>Current implementation of the forms is very long and hard to complete from a user perspective. Some of the form contains 40+ fields. And related to this the validations of all these fields could be very confusing for the end users. And from backend perspective, the API consumes all of this data at once, which is not a good practice.</p>"},{"location":"adr/convert-long-forms/#decision","title":"Decision","text":"<ul> <li>Break forms into logical steps or sections.</li> <li>Add partial save after each step or sections.</li> <li>Redesign APi to accept partial save after record creation.</li> <li>Validate each section seperately and then progress to next one.</li> </ul>"},{"location":"adr/convert-long-forms/#consequences","title":"Consequences","text":"<ul> <li>Better UX and fewer errors due to user entry</li> <li>More granular backend APi</li> <li>Easier to manage readability and better developer exoerience.</li> </ul>"},{"location":"adr/convert-long-forms/#alternatives-considered","title":"Alternatives Considered","text":"<ul> <li>Also can identify, minimum required fields for each forms and the user can create the record and enter the other details later. (This approach will not give huge benefit considering the effort required to refactor)</li> </ul>"},{"location":"adr/db-schema-refactoring/","title":"ADR-001: Database Schema Refactoring for Normalization, Consistency, and Integrity","text":""},{"location":"adr/db-schema-refactoring/#status","title":"Status","text":"<p>Proposed - 13/05/2025</p>"},{"location":"adr/db-schema-refactoring/#context","title":"Context","text":"<p>The current schema works fine as per the functionality, however there are many issues which could lead to trechnical debt and maintainability issues in a long term. Key observations include redundant and denormalized fields. Expecially, the people_user table conatins 50+ fields which could be normalized.</p>"},{"location":"adr/db-schema-refactoring/#decision","title":"Decision","text":"<ul> <li>Normalize or restructure large tables.</li> <li>Naming convetions should be followed.</li> <li>Revisit default datatypes like varying(255)</li> <li>Maintain up to date ER diagram</li> </ul>"},{"location":"adr/db-schema-refactoring/#consequences","title":"Consequences","text":""},{"location":"adr/db-schema-refactoring/#pros","title":"Pros","text":"<ul> <li>Improved data integrity and query performance.</li> <li>Easier to maintain.</li> </ul>"},{"location":"adr/db-schema-refactoring/#cons","title":"Cons","text":"<ul> <li>Requires significant refactoring throughout the application.</li> <li>Migration scripts need to be written to convert existing data to this structure.</li> </ul>"},{"location":"adr/db-schema-refactoring/#alternatives-considered","title":"Alternatives Considered","text":"<ul> <li>Instead of refcatoring the database, we can inlcude this as part of ADR-002 (This would be the better solution, to build that module from scratch)</li> <li>Concentrate only on the tables which has more than 10 fields. (This could make a mix of normalized and denormalized tables)</li> </ul>"},{"location":"adr/db-schema-refactoring/#related","title":"Related","text":"<p>Tables with field count</p>"},{"location":"adr/include-fitness-functions/","title":"ADR-005: Include Fitness Functions for Architecture Validation","text":""},{"location":"adr/include-fitness-functions/#status","title":"Status","text":"<p>Draft - 19/05/2025</p>"},{"location":"adr/include-fitness-functions/#context","title":"Context","text":"<p>As our system evolves, architectural integrity can degrade over time \u2014 leading to issues such as increased coupling, performance bottlenecks, and security gaps. We want to ensure that the architecture of our Spring Boot services remains aligned with our intended principles such as modularity, resilience, performance, and security.</p> <p>To address this proactively, we propose incorporating Fitness Functions \u2014 automated checks that continuously validate architectural characteristics.</p>"},{"location":"adr/include-fitness-functions/#decision","title":"Decision","text":"<p>We will incorporate fitness functions into the project to validate architectural characteristics such as:</p> <ul> <li>Modular boundaries: Using <code>ArchUnit</code> to ensure correct package and layer interactions.</li> <li>Response time thresholds: Using integration tests and/or observability tools to ensure SLAs are met.</li> <li>Security enforcement: Ensuring public APIs are secured via Spring Security (token-based).</li> <li>Naming and package consistency: Enforcing naming conventions and dependencies using <code>ArchUnit</code>.</li> </ul> <p>These fitness functions will be:</p> <ul> <li>Implemented as part of the test suite using ArchUnit for structural rules.</li> <li>Optionally extended via JUnit tests, Postman/Newman, or integration test frameworks to validate runtime characteristics.</li> <li>Integrated into the CI/CD pipeline to fail builds if key architectural rules are violated.</li> </ul>"},{"location":"adr/include-fitness-functions/#consequences","title":"Consequences","text":""},{"location":"adr/include-fitness-functions/#positive","title":"Positive","text":"<ul> <li>Ensures continuous architectural compliance and visibility into architectural drift.</li> <li>Empowers developers to catch violations early in development.</li> <li>Simplifies governance and onboarding by documenting expected architecture.</li> </ul>"},{"location":"adr/include-fitness-functions/#negative","title":"Negative","text":"<ul> <li>Adds a small initial overhead to set up and maintain tests.</li> <li>May require tuning as the system evolves (e.g., response time thresholds).</li> </ul>"},{"location":"adr/include-fitness-functions/#alternatives-considered","title":"Alternatives Considered","text":"<ul> <li>Manual architectural reviews: Less effective and scalable.</li> <li>Tooling-only approaches without tests: Miss the enforcement aspect and are harder to automate.</li> </ul>"},{"location":"adr/include-fitness-functions/#related-decisions","title":"Related Decisions","text":"<ul> <li>Introduced ArchUnit for architectural rules validation.</li> <li>CI/CD pipeline includes architecture test stage.</li> </ul>"},{"location":"adr/migrate-to-springboot/","title":"ADR-002: Migrate Authentication from Python to Spring Boot service","text":""},{"location":"adr/migrate-to-springboot/#status","title":"Status","text":"<p>Proposed - 13/05/2025</p>"},{"location":"adr/migrate-to-springboot/#context","title":"Context","text":"<p>The current authentication system is built using a Python service, but it's a resourcing bottleneck and hard to maintain. It also handles token validation for other spring boot services, creating unnecessary coupling and latency.</p>"},{"location":"adr/migrate-to-springboot/#decision","title":"Decision","text":"<p>We will migrate the authentication to Spring Boot services, so the resource could be easily mananged technology wise.</p>"},{"location":"adr/migrate-to-springboot/#consequences","title":"Consequences","text":"<ul> <li>Resourcing would be easy as all other services are written in Java</li> <li>Centralized user, role, and token management</li> <li>Improved maintainability and scalability</li> <li>Short-term migration effort required</li> </ul>"},{"location":"adr/migrate-to-springboot/#alternatives-considered","title":"Alternatives Considered","text":"<ul> <li>Using Keycloak to handle all authentication and user management. (This would be hard in our scenerio as it includes employees)</li> <li>Using Auth0 or Cognito (involves recurring costs)</li> </ul>"},{"location":"adr/use-mui/","title":"ADR-003: Standardize Frontend with MUI Design System","text":""},{"location":"adr/use-mui/#status","title":"Status","text":"<p>Proposed - 13/05/2025</p>"},{"location":"adr/use-mui/#context","title":"Context","text":"<p>React frontend uses a mix of styled components and lacks modular design. As per current implementation, we use MUI and to match with the design, there is lot of unnecessary work done. Also so much of redundant and unused compoentns are in the system.</p>"},{"location":"adr/use-mui/#decision","title":"Decision","text":"<ul> <li>Adopt MUI Figma UI kit for consistent design.</li> <li>Modularize components using a clean folder structure.</li> <li>Usage of dialog boxes will reduce the scrolling the page from user perspective.</li> <li>Identify common components and reuse it.</li> </ul>"},{"location":"adr/use-mui/#consequences","title":"Consequences","text":"<ul> <li>Consistent UI/UX and devleoper experience.</li> </ul>"},{"location":"adr/use-mui/#related","title":"Related","text":"<p>ADR-004</p>"},{"location":"diagrams/context/","title":"System Context Diagram","text":"<p>This diagram shows how the system interacts with users and external systems.</p> <pre><code>graph LR\n    EMP[Employee]\n    HRA[HR Admin]\n    SA[Super Admin]\n    PM[Project Manager]\n\n    SYSTEM[\"PAPI &lt;BR&gt; (Internal Employee Portal)\"]\n\n    EMP --&gt; SYSTEM\n    HRA --&gt; SYSTEM\n    SA --&gt; SYSTEM\n    PM --&gt; SYSTEM\n\n    SYSTEM &lt;--&gt; DB[(Internal PostgreSQL DB)]\n    EXT_ZOHO[(Zoho DB)] -- employee data --&gt; DB</code></pre>"},{"location":"diagrams/erd/","title":"Entity Relationship Diagram","text":""},{"location":"diagrams/erd/#auth-permissions","title":"Auth &amp; Permissions","text":"<pre><code>erDiagram\n    auth_group ||--o{ auth_group_permissions : has\n    auth_group_permissions }o--|| auth_permission : uses\n    auth_permission ||--o{ django_content_type : typed_as\n    peoples_user ||--o{ peoples_user_groups : belongs_to\n    peoples_user ||--o{ peoples_user_user_permissions : granted</code></pre>"},{"location":"diagrams/erd/#core-people-management","title":"Core People Management","text":"<pre><code>erDiagram\n    direction LR\n    peoples_user ||--o{ peoples_userrole : has\n    peoples_user ||--o{ peoples_documents : has\n    peoples_user ||--o{ peoples_educationalqualification : qualified_by\n    peoples_user ||--o{ peoples_professionalcertificate : certified\n    peoples_user ||--o{ peoples_workexperience : experienced_in\n    peoples_user ||--o{ peoples_useridentitydocument : identified_by\n    peoples_user ||--o{ peoples_bankdetails : paid_via\n    peoples_user ||--o{ peoples_emergencycontact : contacts\n    peoples_user ||--o{ peoples_insurancedependent : insures\n    peoples_user ||--o{ peoples_gratuitynominee : nominates\n    peoples_user ||--o{ peoples_pfnominee : pfnominates</code></pre>"},{"location":"diagrams/erd/#leave-management","title":"Leave Management","text":"<pre><code>erDiagram\n    peoples_user ||--o{ peoples_leaverequest : requests\n    peoples_leaverequest ||--o{ peoples_leaverequestdetail : contains\n    peoples_leaverequest ||--o{ peoples_leaveapproval : approved_by\n    peoples_leaverequest ||--o{ peoples_leaverequestproject : for_project\n    peoples_user ||--o{ peoples_leavebalance : has_balance\n    peoples_user ||--o{ peoples_compensatoryrequest : comp_request\n    peoples_compensatoryrequest ||--o{ peoples_compensatoryrequestapproval : approved\n    peoples_user ||--o{ peoples_entitlement : entitled_to\n    peoples_user ||--o{ peoples_firstmonthrule : first_month_rule</code></pre>"},{"location":"diagrams/erd/#organization-structure","title":"Organization Structure","text":"<pre><code>erDiagram\n    peoples_user ||--o{ peoples_department : works_in\n    peoples_user ||--o{ peoples_designation : holds\n    peoples_user ||--o{ peoples_location : located_at\n    peoples_user ||--o{ peoples_workmode : works_as\n    peoples_user ||--o{ peoples_contractuserprofile : has_contract</code></pre>"},{"location":"diagrams/erd/#roles-menus-permissions","title":"Roles, Menus &amp; Permissions","text":"<pre><code>erDiagram\n    peoples_role ||--o{ peoples_userrole : assigned\n    peoples_menu ||--o{ peoples_menu_roles : linked\n    peoples_menu ||--o{ peoples_menupermission : secured_by\n    peoples_role ||--o{ peoples_rolemenumapping : maps_to\n    peoples_rolemenumapping ||--o{ peoples_rolemenumapping_button_permission : has_button</code></pre>"},{"location":"diagrams/erd/#skills-projects","title":"Skills &amp; Projects","text":"<pre><code>erDiagram\n    peoples_user ||--o{ peoples_userskill : skilled\n    peoples_userskill ||--|| peoples_skill : describes\n    peoples_skill ||--|| peoples_skillcategory : categorized_in\n    peoples_user ||--o{ peoples_userproject : involved_in\n    peoples_project ||--o{ peoples_userproject : worked_on\n    peoples_user ||--o{ peoples_projectallocationl1 : allocated</code></pre>"},{"location":"diagrams/erd/#project-managment","title":"Project Managment","text":"<pre><code>erDiagram\n    project ||--o{ project_allocation : allocates\n    project ||--|| project_type : classified_as\n    project ||--|| project_status : status\n    project ||--o{ project_technology_stack : uses\n    technology_stack ||--o{ project_technology_stack : part_of</code></pre>"},{"location":"diagrams/erd/#billing-domain-currency","title":"Billing, Domain, Currency","text":"<pre><code>erDiagram\n    billing_type ||--|| project : project_type\n    business_unit ||--|| project : under_unit\n    domain ||--|| project : belongs_to\n    currency ||--|| project : uses_currency</code></pre>"},{"location":"diagrams/existing-container/","title":"Container Diagram (In Progress..)","text":"<p>This diagram shows breakdown of internal containers, UI, services, databases, gateways etc. Also show the relation between them.</p> <pre><code>graph LR\n\n    EMP[Employee]\n    HRA[HR Admin]\n    SA[Super Admin]\n    PM[Project Manager]\n\n    subgraph Frontend[\"PAPI Frontend (React + MUI)\"]\n        UI[\"User Interface\"]\n    end\n\n    subgraph Backend[\"PAPI Backend Services\"]\n        Python[\"Python Backend Services\"]\n        Gateway[\"API Gateway (Spring Boot)\"]\n        Java[\"Spring Boot Backend Services\"]\n    end\n\n    subgraph Data[\"Data Layer\"]\n        DB[\"Shared PostgreSQL DB\"]\n    end\n\n    EMP --&gt; UI\n    HRA --&gt; UI\n    SA --&gt; UI\n    PM --&gt; UI\n\n    UI --&gt; Python\n    UI --&gt; Gateway\n\n    Gateway -- Validates Token --&gt; Python\n    Gateway -- redirects --&gt; Java\n\n    Python --&gt; DB\n    Java --&gt; DB</code></pre>"},{"location":"diagrams/proposed-container/","title":"Container Diagram (In Progress..)","text":"<p>This diagram shows breakdown of internal containers, UI, services, databases, gateways etc. Also show the relation between them.</p> <pre><code>graph LR\n\n    EMP[Employee]\n    HRA[HR Admin]\n    SA[Super Admin]\n    PM[Project Manager]\n\n    subgraph Frontend[\"PAPI Frontend (React + MUI)\"]\n        UI[\"User Interface\"]\n    end\n\n    subgraph Backend[\"PAPI Backend Services\"]\n        Gateway[\"API Gateway (Spring Boot)\"]\n        Java[\"Spring Boot Backend Services\"]\n    end\n\n    subgraph Data[\"Data Layer\"]\n        DB[\"Shared PostgreSQL DB\"]\n    end\n\n    EMP --&gt; UI\n    HRA --&gt; UI\n    SA --&gt; UI\n    PM --&gt; UI\n\n    UI --&gt; Gateway\n\n    Gateway -- redirects --&gt; Java\n\n    Java --&gt; DB</code></pre>"},{"location":"diagrams/proposed-context/","title":"System Context Diagram","text":"<p>This diagram shows how the system interacts with users and external systems.</p> <pre><code>graph LR\n    EMP[Employee]\n    HRA[HR Admin]\n    SA[Super Admin]\n    PM[Project Manager]\n\n    PAPI[\"PAPI &lt;BR&gt; (Internal Employee Portal)\"]\n    EXT_PMD[\"PM Dashboard\"]\n\n    PAPI &lt;--&gt; EXT_PMD\n\n    EMP --&gt; PAPI\n    HRA --&gt; PAPI\n    SA --&gt; PAPI\n    PM --&gt; PAPI\n\n    PAPI &lt;--&gt; DB[(Internal PostgreSQL DB)]\n    EXT_ZOHO[(Zoho DB)] -- employee data --&gt; DB\n\n    style EXT_ZOHO fill:lightgreen,stroke:white\n    style EXT_PMD fill:lightgreen</code></pre>"},{"location":"others/api-endpoints/","title":"PAPI Api Endpoints","text":""},{"location":"others/api-endpoints/#python-backend","title":"Python Backend","text":""},{"location":"others/api-endpoints/#peoples-core-employee-operations","title":"Peoples - Core Employee Operations","text":"Method Path Description Decision GET /peoples/ Get employee details from Zoho peoples GET /peoples/list/ Get all employee list, search and filter GET /peoples/{id}/ Retrieve employee details PUT /peoples/deactivate/{id}/ Deactivate a user PATCH /peoples/deactivate/{id}/ Deactivate a user (partial)"},{"location":"others/api-endpoints/#peoples-regular-employees","title":"Peoples - Regular Employees","text":"Method Path Description Decision POST /peoples/regular/ Create regular employee PUT /peoples/regular/{id} Update regular employee PATCH /peoples/regular/{id} Partial update regular employee"},{"location":"others/api-endpoints/#peoples-contractors","title":"Peoples - Contractors","text":"Method Path Description Decision POST /peoples/contractor/ Add contract employee GET /peoples/contractor/{id}/ Retrieve contract user PUT /peoples/contractor/{id}/ Update contract user PATCH /peoples/contractor/{id}/ Partial update for contract user"},{"location":"others/api-endpoints/#peoples-identifiers-and-login","title":"Peoples - Identifiers and Login","text":"Method Path Description Decision GET /peoples/generate-contract-id/ Retrieve new contract employee ID GET /peoples/generate-employee-id/ Retrieve new regular employee ID POST /peoples/login/ User login POST /peoples/login/google/ Handle Google OAuth2 callback POST /peoples/logout/ Logout the current user POST /peoples/refreshtoken/ Refresh JWT token POST /peoples/token/verify/ Verify JWT token POST /peoples/set-password/ Set password"},{"location":"others/api-endpoints/#peoples-skills-proficiency","title":"Peoples - Skills &amp; Proficiency","text":"Method Path Description Decision GET /peoples/skill-master/ List skills (active only) GET /peoples/skill/ List skills (active only) POST /peoples/skill/ Create skills GET /peoples/skill/{id}/ Retrieve skill PUT /peoples/skill/{id}/ Update skill PATCH /peoples/skill/{id}/ Partial update skill DELETE /peoples/skill/{id}/ Delete skill GET /peoples/skill/categories/ List &amp; search skill categories POST /peoples/skills-categories/ Create skill category GET /peoples/skills-categories/{id}/ Retrieve skill category PUT /peoples/skills-categories/{id}/ Update skill category PATCH /peoples/skills-categories/{id}/ Partial update skill category DELETE /peoples/skills-categories/{id}/ Delete skill category GET /peoples/proficiency/ List proficiencies PUT /peoples/proficiency/{id}/ Update proficiency PATCH /peoples/proficiency/{id}/ Partial update for proficiency POST /peoples/user/skill/ Add user skill PUT /peoples/user/skill/{id}/ Update user skill PATCH /peoples/user/skill/{id}/ Partial update user skill DELETE /peoples/user/skill/{id}/ Delete user skill GET /peoples/{id}/user-skills/ Get employee skills"},{"location":"others/api-endpoints/#peoples-education-certificates-experience","title":"Peoples - Education, Certificates, Experience","text":"Method Path Description Decision DELETE /peoples/educational-qualification/{id}/ Remove educational qualification POST /peoples/professional-certificates/ Add professional certificate GET /peoples/{id}/certificates/ Get employee certificates GET /peoples/{id}/work-experience/ Get employee work experiences"},{"location":"others/api-endpoints/#peoples-metadata-departments-designations-locations-managers","title":"Peoples - Metadata (Departments, Designations, Locations, Managers)","text":"Method Path Description Decision GET /peoples/departments/ List &amp; search department GET /peoples/designations/ List &amp; search designation GET /peoples/locations/ List &amp; search locations GET /peoples/reporting-managers/ List reporting managers"},{"location":"others/api-endpoints/#peoples-user-project-overview","title":"Peoples - User &amp; Project Overview","text":"Method Path Description Decision GET /peoples/users/ Get all user list GET /peoples/{id}/user-projects/ Get employee projects"},{"location":"others/api-endpoints/#spring-boot-services","title":"Spring Boot Services","text":""},{"location":"others/api-endpoints/#people-module-user-roles","title":"People Module - User Roles","text":"Method Path Description Decision GET /peoplemodule/userRole List user roles with optional pagination and filtering by username GET /peoplemodule/userRole/{id} Fetch role details of a user by ID POST /peoplemodule/userRole Assign role(s) to a user PUT /peoplemodule/userRole/{userId} Update roles of a user DELETE /peoplemodule/userRole?userId=1?roleId=1 Remove a specific role from a user using userId and roleId as query params"},{"location":"others/api-endpoints/#people-module-user-info","title":"People Module - User Info","text":"Method Path Description Decision GET /peoplemodule/peopleUserList Get users with optional filtering by employeeId GET /peoplemodule/user-details Fetch details of the currently authenticated user"},{"location":"others/api-endpoints/#role-permission-management","title":"Role Permission Management","text":"Method Path Description Decision GET /peoplemodule/rolePermissions List all roles with filtering, pagination, and sorting GET /peoplemodule/rolePermissions/{id} Get role details by ID GET /peoplemodule/selectedPermissions/{id} Get selected permissions for a role GET /peoplemodule/userList/{id} List users assigned to a specific role by roleId POST /peoplemodule/rolePermissions Create a new role with permissions PUT /peoplemodule/rolePermissions/{id} Update a role\u2019s permissions by ID DELETE /peoplemodule/rolePermissions?roleId=1 Delete a role by roleId query param"},{"location":"others/api-endpoints/#menu-management","title":"Menu Management","text":"Method Path Description Decision GET /peoplemodule/menuMaster Get a menu by id and parentId GET /peoplemodule/menuMaster/list Fetch all menu items GET /peoplemodule/menuList Fetch dropdown-friendly list of menus POST /peoplemodule/menuMaster Create a new menu DELETE /peoplemodule/menuMaster/{id} Delete a menu by ID"},{"location":"others/api-endpoints/#leave-management-spring-boot-services","title":"Leave Management (Spring Boot Services)","text":""},{"location":"others/api-endpoints/#leave-types-and-status","title":"Leave Types and Status","text":"Method Path Description Decision PUT /leave/updateLeaveType/{id} Update leave type by ID POST /leave/saveLeaveType Add leave type DELETE /leave/deleteLeaveType/{leaveTypeId} Delete leave type GET /leave/leaveType Get all leave types GET /leave/getLeaveTypeById/{id} Get leave type by ID GET /leave/getAllLeaveTypeAndYear Get all leave types and year PATCH /leave/updateStatus/{id} Update status"},{"location":"others/api-endpoints/#leave-requests-actions","title":"Leave Requests &amp; Actions","text":"Method Path Description Decision POST /leave/leaveRequest Apply leave GET /leave/leaveRequest/{id} Get leave request by ID PUT /leave/leaveRequest/{id} Update leave request when status is pending PUT /leave/cancel/{id} Cancel leave request PUT /leave/leaveApprove Approve leave PUT /leave/rejectLeave Reject leave request POST /leave/requestForMoreInfo/{leaveRequestId} Request more information GET /leave/getAllLeaveRequestOfUser Get all leave requests with employee ID GET /leave/getAllLeaveRequestByApproverId Get leave requests by approver ID GET /leave/allLeaveRequest Get all leave requests DELETE /leave/getAllLeaveRequestOfUser/{id} Delete leave request by date"},{"location":"others/api-endpoints/#toil-requests","title":"TOIL Requests","text":"Method Path Description Decision PUT /leave/toilReject Reject TOIL request PUT /leave/toilCancel/{id} Cancel TOIL request PUT /leave/toilApprove Approve TOIL request POST /leave/toilApprovalEntry Create TOIL approval"},{"location":"others/api-endpoints/#holidays","title":"Holidays","text":"Method Path Description Decision POST /leave/addHoliday Add holiday PUT /leave/updateHoliday/{holidayId} Update holiday GET /leave/holiday Get holidays GET /leave/getHolidaysByLocation Get holidays by location and year GET /leave/getHolidaysByEmployeeId Get holidays by employee ID and year GET /leave/getHolidayById/{holidayId} Get holiday by ID DELETE /leave/deleteHoliday/{holidayId} Delete holiday GET /leave/sendHolidayReminders Send holiday reminders"},{"location":"others/api-endpoints/#metadata-configuration","title":"Metadata &amp; Configuration","text":"Method Path Description Decision GET /leave/getAllUnit Get all units GET /leave/getAllDesignations Get all designations GET /leave/getAllDepartments Get all departments GET /leave/getAllTimelineByRequestId/{leaveRequestId} Get reminders by leave request ID GET /leave/getAllRole Get all roles GET /leave/getAllResetType Get all reset types GET /leave/getAllResetMonth Get all reset months GET /leave/getAllReminderDays Get all reminder days GET /leave/getAllPercentage Get all percentage GET /leave/getAllLocations Get all locations GET /leave/getAllGender Get all genders GET /leave/getAllHolidayTypes Get all holiday types GET /leave/getAllEffectiveTypes Get all effective types GET /leave/getAllEffectiveMonth Get all effective months GET /leave/updateAllocateToL1/getAllEffectiveDate Get all effective dates GET /leave/getAllCarryForwardStatus Get all carry forward status GET /leave/getAllBalanceBasedOn Get all balance based on GET /leave/getAllAccuralType Get all accrual types GET /leave/getAllAccuralStatus Get all accrual status GET /leave/getAllAccuralMonth Get all accrual months GET /leave/getAllAccuralDate Get all accrual dates GET /leave/health Health check endpoint"},{"location":"others/api-endpoints/#project-module-master-data-allocations","title":"Project Module - Master Data &amp; Allocations","text":""},{"location":"others/api-endpoints/#technology-stack","title":"Technology Stack","text":"Method Path Description Decision GET /project/technologyStack Retrieve all technology stacks GET /project/technologyStack/{id} Find technology stack by ID GET /project/technologyStackSearch Search technology stacks by name POST /project/technologyStack Create a new technology stack PUT /project/technologyStack Update a technology stack DELETE /project/technologyStack/{id} Delete a technology stack"},{"location":"others/api-endpoints/#project-crud","title":"Project CRUD","text":"Method Path Description Decision GET /project/project Find a project by ID (query parameter required) POST /project/project Add master data for project module PUT /project/project Update master data for the project module"},{"location":"others/api-endpoints/#project-types","title":"Project Types","text":"Method Path Description Decision GET /project/projectType Find all project types GET /project/projectType/{id} Find a project type by ID POST /project/projectType Create a project type PUT /project/projectType Update a project type DELETE /project/projectType/{id} Delete a project type"},{"location":"others/api-endpoints/#project-statuses","title":"Project Statuses","text":"Method Path Description Decision GET /project/projectStatus Find all project statuses GET /project/projectStatus/{id} Find a project status by ID POST /project/projectStatus Create a project status PUT /project/projectStatus Update a project status DELETE /project/projectStatus/{id} Delete a project status by ID"},{"location":"others/api-endpoints/#domains","title":"Domains","text":"Method Path Description Decision GET /project/domain Find all domains GET /project/domain/{id} Find a domain by ID POST /project/domain Create a domain PUT /project/domain Update a domain DELETE /project/domain/{id} Delete a domain by ID"},{"location":"others/api-endpoints/#currency","title":"Currency","text":"Method Path Description Decision GET /project/currency Find all currencies GET /project/currency/{id} Find a currency by ID POST /project/currency Create a currency PUT /project/currency Update a currency DELETE /project/currency/{id} Delete a currency by ID"},{"location":"others/api-endpoints/#business-units","title":"Business Units","text":"Method Path Description Decision GET /project/businessUnit Get all business units GET /project/businessUnit/{id} Find a business unit by ID POST /project/businessUnit Create a business unit PUT /project/businessUnit Update a business unit DELETE /project/businessUnit/{id} Delete a business unit by ID"},{"location":"others/api-endpoints/#billing-types","title":"Billing Types","text":"Method Path Description Decision GET /project/billingType Get all billing types GET /project/billingType/{id} Find a billing type by ID POST /project/billingType Create a billing type PUT /project/billingType Update a billing type DELETE /project/billingType/{id} Delete a billing type"},{"location":"others/api-endpoints/#project-allocations-users","title":"Project Allocations &amp; Users","text":"Method Path Description Decision PUT /project/unassign/{id} Unassign (delete allocation) from a project POST /project/peopleUserList Update project managers from people users GET /project/projectMaster Get all master data for project module GET /project/projectDetails Find a project by ID GET /project/projectAllocate Get project by ID GET /project/project-allocation Find project allocation by project ID GET /project/findProjectBySmlId Find projects by SML ID GET /project/doc Download doc for project module GET /project/allProject Fetches a paginated list of all projects"},{"location":"others/estimation/","title":"Full System Revamp: High-Level Estimation","text":"<p>This document outlines a high-level estimation for the system revamp initiative, organized by major workstreams spanning backend, frontend, and database layers.</p>"},{"location":"others/estimation/#workstream-breakdown-estimation","title":"Workstream Breakdown &amp; Estimation","text":"ID Title Description Estimated Effort (Person-Days) Notes 01 UI Revamp with MUI Replace legacy UI with Material UI components for consistency and responsiveness 7\u201310 Consistent styling and responsive design. Also flow based design should be there. 02 DB Schema Refactor Refactor and evolve database schema, normalize the tables 4\u20137 Schema updates, revisit the tables and normalize 03 Converting Python module New spring boot service for all services written in Python 10\u201315 Prefer to be done only after the DB refactor 04 API Endpoint Adjustments Align API endpoints with new database changes. 5\u20138 <code>This estimate might require a revisit after database refactor.</code> 05 UI Adjutments Align the UI with new API endpoint adjustments. 7\u201310 <code>This estimate might require a revisit after estimating API endpoints changes.</code> 06 Stepper Forms Convert static long forms into multi-step/tab flows with validation and draft support 8\u201312 Complex form logic, draft-save, and validation. Use a common component if available, or create a reusable one."},{"location":"others/estimation/#total-estimated-effort","title":"Total Estimated Effort","text":"<p>Range: <code>41 \u2013 62 person-days</code> Assumptions / Notes</p> <ul> <li>UI/UX design changes and database refactoring should be done first.</li> <li>Finalize and review designs with all stakeholders before starting changes.</li> <li>After the above steps, need to revisit the estimates.</li> </ul>"},{"location":"others/tables-and-field-counts/","title":"Tables and Field Counts","text":"<p>This document provides an overview of the tables and their respective field counts. Tables with more than 10 fields are highlighted for special attention.</p> Table Name Field Count peoples_user 50+ peoples_entitlement 25 peoples_restrictions 25 project 22 peoples_leaverequest 16 peoples_contractuserprofile 16 peoples_leavetype 15 peoples_compensatoryrequest 14 peoples_leaveapproval 13 peoples_leavebalance 10 peoples_professionalcertificate 9 peoples_holiday 9 peoples_address 8 peoples_menupermission 8 peoples_projectallocationl1 8 peoples_project 7 peoples_userskill 7 peoples_menu 6 peoples_workexperience 6 project_allocation 6 token_blacklist_outstandingtoken 6 peoples_accesstoken 5 peoples_bankdetails 5 peoples_educationalqualification 5 peoples_gratuitynominee 5 peoples_leaverequestdetail 5 peoples_userproject 5 peoples_skill 5 peoples_applicable 4 peoples_compensatoryrequestapproval 4 peoples_documents 4 peoples_emergencycontact 4 peoples_firstmonthrule 4 peoples_insurancedependent 4 peoples_invitationtoken 4 peoples_useridentitydocument 4 peoples_userrole 4 auth_permission 4 peoples_workmode 2 billing_type 2 business_unit 2 currency 2 domain 2 peoples_department 2 peoples_designation 2 peoples_location 2 project_status 2 project_technology_stack 2 project_type 2 technology_stack 2 auth_group 2 auth_group_permissions 3 peoples_hraduitlog 3 peoples_leaverequestproject 3 peoples_menu_roles 3 peoples_pfnominee 3 peoples_proficiency 3 peoples_role 3 peoples_rolemenumapping 3 peoples_rolemenumapping_button_permission 3 peoples_skillcategory 3 peoples_user_groups 3 peoples_user_user_permissions 3 token_blacklist_blacklistedtoken 3 authtoken_token 3"}]}